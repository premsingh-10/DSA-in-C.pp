#include <iostream>
using namespace std;

class Node
{
public:
  int data;
  Node *prev;
  Node *next;

  //constructor
    Node (int d)
  {
    this->data = d;
    this->prev = NULL;
    this->next = NULL;
  }
  
  //destrutor
    ~Node(){
      int val = this -> data;
      if(next!= NULL){
          delete next;
          next = NULL;
        }
        
        cout << "memory free for node with data " << val << endl;
    }
};

//tranversing of nodes
void
printNode (Node * head)
{
  Node *temp = head;

  while (temp != NULL)
    {
      cout << temp->data << " ";
      temp = temp->next;
    }
  cout << endl;
}

//get length of node
int
getLength (Node * head)
{
  int len = 0;
  Node *temp = head;

  while (temp != NULL)
    {
      len++;
      temp = temp->next;
    }
  return len;
}

//insert at start
void
inserAtStart (Node* &tail,Node * &head, int d)
{
    if(head == NULL){
      Node* temp = new Node(d);
      head = temp;
      tail = temp;
    }
    else{
        //create a new Node
        Node *temp = new Node (d);
        temp->next = head;
        head->prev = temp;
        head = temp;
    }
}

//insert at end
void insertAtEnd(Node* &tail,Node* &head,int d){
    if(tail == NULL){
       Node* temp = new Node(d);
       tail = temp;
       head = temp;
    }
    else{
        //create a new Node
        Node *temp = new Node(d);
        tail -> next = temp;
        temp -> prev = tail;
        tail = temp;
    }
}

//insert at any position
void insertAtPosition(Node* &tail,Node* &head,int position,int d){
    //inset at start
    if(position == 1){
        inserAtStart(tail,head,d);
        return;
    }
    
    Node* temp = head;
    int cnt = 1;
    
    while(cnt < position - 1){
        temp = temp -> next;
        cnt++;
    }
    
    //inserting at last position
    if(temp -> next == NULL){
        insertAtEnd(tail,head,d);
        return;
    }
    
    //creating a new Node
    Node* nodeToInsert = new Node(d);
    
    nodeToInsert -> next = temp -> next;
    temp -> next ->prev = nodeToInsert;
    temp -> next = nodeToInsert;
    nodeToInsert -> prev = temp;
}

//delete of Node
void deleteOfNode(int position, Node* &head) {
    //deleting first or start Node
    if(position == 1){
        Node* temp = head;
        temp -> next -> prev = NULL;
        head = temp -> next;
        temp -> next = NULL;
        delete temp;
    }
    
    else{
        
        Node* curr = head;
        Node* prev = NULL;
        
        int cnt = 1;
        while(cnt < position){
            prev = curr;
            curr = curr -> next;
            cnt++;
        }
        
        curr -> prev = NULL;
        prev -> next = curr -> next;
        curr -> next = NULL;
        
        delete curr;
    }
}

int main ()
{

  Node *node1 = new Node (10);
  
  Node *head = node1;
  Node *tail = node1;

  printNode (head);

  inserAtStart (tail,head, 18);
  printNode (head);
  
  insertAtEnd (tail,head, 28);
  printNode (head);
  
  insertAtEnd (tail,head, 89);
  printNode (head);
  
  insertAtPosition(tail,head,2,500);
  printNode(head);
  
  insertAtPosition(tail,head,5,5);
  printNode(head);

  cout << getLength(head) << endl;
  
  deleteOfNode(1,head);
  printNode(head);
  
  deleteOfNode(5,head);
  printNode(head);
  return 0;
}
